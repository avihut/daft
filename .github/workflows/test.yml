name: Test Git Worktree Workflow

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  # Fast feedback: unit tests, linting, formatting on Ubuntu only
  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-latest-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-
    
    - name: Build Rust binaries
      run: cargo build --release

    - name: Clean old binaries from cache
      run: |
        # Remove any old binaries that might be in cache from before src/bin/ was removed
        rm -f target/release/git-worktree-*
        echo "Cleaned old binaries from cache"

    - name: Verify single binary architecture
      run: |
        echo "Verifying single binary architecture..."
        # Count executables in target/release (excluding .d files and symlinks)
        BINARY_COUNT=$(find target/release -maxdepth 1 -type f -perm /111 ! -name "*.d" | wc -l | tr -d ' ')
        echo "Found $BINARY_COUNT binary executable(s)"

        # Verify exactly 1 binary exists
        if [ "$BINARY_COUNT" -ne 1 ]; then
          echo "ERROR: Expected exactly 1 binary, found $BINARY_COUNT"
          echo "Binaries found:"
          find target/release -maxdepth 1 -type f -perm /111 ! -name "*.d" -exec ls -lh {} \;
          exit 1
        fi

        # Verify it's named 'daft'
        if [ ! -f target/release/daft ]; then
          echo "ERROR: Binary 'daft' not found"
          exit 1
        fi

        echo "✓ Single binary architecture verified: daft binary exists"
        ls -lh target/release/daft

    - name: Run Rust unit tests
      run: cargo test --lib
    
    - name: Run Rust clippy
      run: cargo clippy -- -D warnings
    
    - name: Check Rust formatting
      run: cargo fmt -- --check

  # Cross-platform integration tests (where platform differences matter)
  integration-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Git
      run: |
        git config --global user.name "Test User"
        git config --global user.email "test@example.com"
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ matrix.os }}-cargo-
    
    - name: Build Rust binaries
      run: cargo build --release

    - name: Clean old binaries from cache
      run: |
        # Remove any old binaries that might be in cache from before src/bin/ was removed
        rm -f target/release/git-worktree-*
        echo "Cleaned old binaries from cache"

    - name: Verify single binary architecture
      run: |
        echo "Verifying single binary architecture..."
        # Count executables in target/release (excluding .d files and symlinks)
        BINARY_COUNT=$(find target/release -maxdepth 1 -type f -perm /111 ! -name "*.d" | wc -l | tr -d ' ')
        echo "Found $BINARY_COUNT binary executable(s)"

        # Verify exactly 1 binary exists
        if [ "$BINARY_COUNT" -ne 1 ]; then
          echo "ERROR: Expected exactly 1 binary, found $BINARY_COUNT"
          echo "Binaries found:"
          find target/release -maxdepth 1 -type f -perm /111 ! -name "*.d" -exec ls -lh {} \;
          exit 1
        fi

        # Verify it's named 'daft'
        if [ ! -f target/release/daft ]; then
          echo "ERROR: Binary 'daft' not found"
          exit 1
        fi

        echo "✓ Single binary architecture verified: daft binary exists"
        ls -lh target/release/daft

    - name: Make test scripts executable
      run: chmod +x tests/legacy/*.sh tests/integration/*.sh src/legacy/*
    
    - name: Add scripts to PATH (shell version)
      run: |
        echo "${{ github.workspace }}/src/legacy" >> $GITHUB_PATH
        echo "PATH=${{ github.workspace }}/src/legacy:$PATH" >> $GITHUB_ENV
    
    - name: Create symlinks for Rust binaries
      run: |
        # Create symlinks for the new multicall binary
        cd target/release
        ln -sf daft git-worktree-clone
        ln -sf daft git-worktree-init
        ln -sf daft git-worktree-checkout
        ln -sf daft git-worktree-checkout-branch
        ln -sf daft git-worktree-checkout-branch-from-default
        ln -sf daft git-worktree-prune
        ln -sf daft git-daft
        cd ../..

    - name: Add Rust binaries to PATH
      run: |
        echo "${{ github.workspace }}/target/release" >> $GITHUB_PATH
        echo "PATH=${{ github.workspace }}/target/release:$PATH" >> $GITHUB_ENV
    
    - name: Test script dependencies
      run: |
        echo "Testing required dependencies..."
        which git || { echo "Git not found"; exit 1; }
        which awk || { echo "AWK not found"; exit 1; }
        which basename || { echo "basename not found"; exit 1; }
        echo "All dependencies found"
    
    - name: Run legacy tests
      run: make test-legacy
    
    - name: Run Rust integration tests
      run: make test-integration
    
    - name: Test help commands
      run: |
        # Test legacy script help
        git worktree-clone --help || echo "Legacy help command test"
        git worktree-checkout --help || echo "Legacy help command test"
        git worktree-checkout-branch --help || echo "Legacy help command test"
        git worktree-checkout-branch-from-default --help || echo "Legacy help command test"
        git worktree-init --help || echo "Legacy help command test"
        git worktree-prune --help || echo "Legacy help command test"

        # Test Rust binary help (via symlinks)
        ./target/release/git-worktree-clone --help
        ./target/release/git-worktree-checkout --help
        ./target/release/git-worktree-checkout-branch --help
        ./target/release/git-worktree-checkout-branch-from-default --help
        ./target/release/git-worktree-init --help
        ./target/release/git-worktree-prune --help

        # Test git daft documentation command
        ./target/release/daft | head -20
        ./target/release/git-daft | head -20
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          tests/test-results.log
        retention-days: 7
        if-no-files-found: ignore