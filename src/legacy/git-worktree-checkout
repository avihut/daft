#!/bin/bash

# ⚠️  DEPRECATED: This shell script is deprecated. Please use the Rust implementation instead.
# Migration: `cargo build --release && ./target/release/git-worktree-checkout --help`
# See: src/legacy/README.md for migration guide

# Creates a git worktree at the project root level, checking out an EXISTING branch,
# set upstream tracking to the corresponding remote branch (if it exists),
# run 'direnv allow' (if direnv exists), and finally cd into the new worktree.
#
# Can be run from anywhere within the Git repository (including deep subdirectories).
# The new worktree will be created at the project root level (alongside .git directory).
#
# Usage: git worktree-checkout <existing-branch-name>
#
# Arguments:
#    $1: existing-branch-name - The name of the EXISTING local or remote branch to check out
#                               and the name for the new worktree directory. Required.
#                               If only a remote branch exists (e.g., origin/feature/abc),
#                               Git usually creates the local branch automatically.
#
# Example (run from anywhere in ~/projects/my-repo/):
#    git worktree-checkout feature/existing-feature
#    -> Creates worktree at ~/projects/my-repo/feature/existing-feature checking out 'feature/existing-feature',
#       sets upstream to 'origin/feature/existing-feature', runs direnv, then cds into it.
#

# Use local variables
branch_name=$1 # Renamed for clarity

# --- Configuration ---
remote_name="origin" # Remote for upstream tracking
# --- End Configuration ---

# --- Define the worktree path ---
# Find the project root directory (where .git is located)
git_common_dir=$(git rev-parse --git-common-dir 2>/dev/null)
if [[ -z "$git_common_dir" ]]; then
  echo "Error: Could not determine Git common directory." >&2
  exit 1
fi

# Get the absolute path to the project root (parent of .git directory)
project_root=$(dirname "$git_common_dir")
if [[ ! -d "$project_root" ]]; then
  echo "Error: Could not determine project root directory." >&2
  exit 1
fi

# Create worktree path at project root level
worktree_path="${project_root}/${branch_name}"
# --- End Path Definition ---

# --- Input Validation ---
if [[ -z "$branch_name" ]]; then
  echo "Error: Existing branch name is required." >&2
  echo "Usage: git worktree-checkout <existing-branch-name>" >&2
  echo "(Remember to run this from within your repository directory)" >&2
  exit 1
fi

# --- Preliminary Checks ---
# Optional: Check if the branch exists locally or remotely beforehand?
# `git show-ref --verify --quiet refs/heads/"$branch_name"` checks local
# `git show-ref --verify --quiet refs/remotes/"$remote_name"/"$branch_name"` checks remote
# `git worktree add` will fail anyway if it doesn't exist in some form, so maybe skip explicit check.

original_dir=$(pwd)
real_worktree_path=""

# --- Execution ---
echo "Attempting to create Git worktree and checkout branch:"
echo "  Path:         ${worktree_path}"
echo "  Branch:       ${branch_name}"
echo "  Project Root: ${project_root}"
echo "---"

# Step 1: Create the worktree and checkout the existing branch
# Note: No '-b'. We provide the branch name directly.
# If 'branch_name' exists locally, it checks it out.
# If it only exists on 'remote_name', Git typically creates a local tracking branch.
if git worktree add "$worktree_path" "$branch_name"; then
  echo "---"
  # Use absolute path (worktree_path is already absolute)
  real_worktree_path="$worktree_path"
  if [[ ! -d "$real_worktree_path" ]]; then
    echo "Error: Worktree directory was not created at '${real_worktree_path}'." >&2
    exit 1
  fi
  echo "Git worktree created successfully at '${real_worktree_path}' checking out branch '${branch_name}'."

  # Step 2: Change directory into the new worktree
  echo "--> Changing directory to worktree: ${real_worktree_path}"
  if cd -- "$real_worktree_path"; then
      echo "--> Successfully changed directory to $(pwd)"

      # Step 3: Set upstream tracking (if corresponding remote branch exists)
      remote_branch_ref="refs/remotes/${remote_name}/${branch_name}"
      echo "--> Checking for remote branch '${remote_name}/${branch_name}'..."
      if git show-ref --verify --quiet "$remote_branch_ref"; then
          echo "--> Remote branch found. Attempting: git branch --set-upstream-to=${remote_name}/${branch_name}"
          # We are now IN the worktree, on the branch 'branch_name', so we can set upstream directly
          if git branch --set-upstream-to="${remote_name}/${branch_name}"; then
              echo "--> Upstream tracking set successfully to '${remote_name}/${branch_name}'."
          else
              upstream_exit_code=$?
              echo "---"
              echo "Warning: Failed to set upstream tracking for branch '${branch_name}' to '${remote_name}/${branch_name}' (Exit code: ${upstream_exit_code})." >&2
              echo "         Worktree created and CD'd into, but upstream may need manual configuration." >&2
              # Decide whether this is a fatal error or just a warning. Let's treat as warning.
          fi
      else
          echo "--> Remote branch '${remote_name}/${branch_name}' not found. Skipping upstream setup."
          echo "    You might need to push the branch or check the remote name/branch name."
      fi

      # Step 4: Handle direnv (silently skip if not found)
      # Only proceed if direnv command exists
      if command -v direnv &> /dev/null; then
          echo "--> Running 'direnv allow'..."
          if [[ -f ".envrc" ]]; then
              if direnv allow .; then
                  echo "--> 'direnv allow .' completed successfully."
              else
                  # Still report failure if direnv exists but allow fails
                  echo "Warning: 'direnv allow .' failed. You may need to run it manually." >&2
              fi
          else
              echo "--> No .envrc file found in $(pwd). Skipping 'direnv allow'."
          fi
      # --- NO ELSE block here: Silently skip if direnv is not found ---
      fi
      echo "---"
      echo "Overall Success: Worktree created, branch checked out, upstream handled, direnv handled (if present), and CD'd into worktree."
      exit 0 # Success

  else
    # cd failed
    cd_exit_code=$?
    echo "---"
    echo "Error: Failed to change directory to the new worktree path '${real_worktree_path}' (Exit code: ${cd_exit_code})." >&2
    echo "Worktree *may* have been created, but subsequent steps were skipped." >&2
    echo "You are still in the original directory: ${original_dir}"
    echo "Please check permissions and path." >&2
    # Attempt to clean up the potentially created but unusable worktree? Optional, maybe too destructive.
    # git worktree remove --force "$worktree_path" # Be careful with this
    cd -- "$original_dir" || echo "Warning: Could not return to original directory ${original_dir}" >&2
    exit 1
  fi
else
  # git worktree add failed
  wt_exit_code=$?
  echo "---"
  echo "Error: Failed to create git worktree (Exit code: ${wt_exit_code})." >&2
  echo "Check if branch '$branch_name' exists locally or remotely ('$remote_name/$branch_name')," >&2
  echo "check path permissions, or if the target path '${worktree_path}' already exists." >&2
  exit 1
fi