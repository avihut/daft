
# Function to create a git worktree and branch based on the REMOTE'S DEFAULT branch
# (e.g., main, master). It determines the default branch and then calls 'gcbw'.
#
# Usage: gcbdw <new-branch-name>
# (gcbdw = Git New Worktree Branch Default)
#
# Arguments:
#    $1: new-branch-name    - The name for the new branch and the worktree directory. Required.
#
# Example (assuming remote 'origin' default is 'main'):
#   gcbdw feature/cool-stuff
#   -> Determines default branch is 'main'
#   -> Effectively runs: gcbw feature/cool-stuff main
#
gcbdw() {
  # Use local variables
  local new_branch_name=$1
  local default_branch # To be detected
  local git_common_dir # Changed variable name for clarity
  local head_ref_file
  local head_ref_content

  # --- Configuration ---
  local remote_name="origin" # Remote to check for default branch
  # --- End Configuration ---

  # --- Input Validation ---
  if [[ -z "$new_branch_name" ]]; then
    echo "Error: New branch name is required." >&2
    echo "Usage: gcbdw <new-branch-name>" >&2
    return 1
  fi

  # --- Determine Default Branch (using file reading method) ---
  echo "--> Determining default branch for remote '$remote_name'..."

  # Use --git-common-dir to reliably find the shared .git directory path
  # This works correctly even when run from within a worktree.
  git_common_dir=$(git rev-parse --git-common-dir 2>/dev/null)
  if [[ -z "$git_common_dir" ]]; then
      # Check if maybe we are not in a git repo at all
      if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
         echo "Error: [gcbdw] Not inside a Git repository." >&2
         return 1
      fi
      # If we are in a repo, but --git-common-dir failed, something is odd
      echo "Error: [gcbdw] Could not determine Git common directory using 'git rev-parse --git-common-dir'." >&2
      echo "Your Git repository structure might be unusual. Please check your setup." >&2
      return 1
  fi

  # Construct the path to the file containing the default branch ref within the common dir
  head_ref_file="${git_common_dir}/refs/remotes/${remote_name}/HEAD"

  # Check if the reference file exists
  if [[ ! -f "$head_ref_file" ]]; then
      echo "Error: [gcbdw] Default branch reference file not found at '$head_ref_file'." >&2
      echo "Please ensure remote '$remote_name' exists and its HEAD is set correctly locally." >&2
      echo "(Have you fetched from the remote? Try: 'git remote set-head $remote_name --auto' and 'git fetch $remote_name')" >&2
      return 1
  fi

  # Read the content of the file (e.g., "ref: refs/remotes/origin/main")
  head_ref_content=$(<"$head_ref_file")

  # Check if the content starts with "ref: "
  if [[ "$head_ref_content" == ref:* ]]; then
      # Extract branch name using shell parameter expansion
      default_branch=${head_ref_content#ref: refs/remotes/$remote_name/}
      if [[ -z "$default_branch" ]] || [[ "$default_branch" == "$head_ref_content" ]]; then
           echo "Error: [gcbdw] Could not parse branch name from content of '$head_ref_file':" >&2
           echo "Content: '$head_ref_content'" >&2
           return 1
      fi
      echo "--> [gcbdw] Detected default origin branch: '$default_branch'"
  else
      # Content was not in the expected format
      echo "Error: [gcbdw] Unexpected content found in '$head_ref_file':" >&2
      echo "Content: '$head_ref_content'" >&2
      echo "Expected format: 'ref: refs/remotes/${remote_name}/<branch_name>'" >&2
      return 1
  fi
  # --- End Determine Default Branch ---

  # --- Call gcbw ---
  echo "--> [gcbdw] Calling gcbw '$new_branch_name' '$default_branch'..."
  # Execute gcbw with the new branch name and the detected default branch
  # Pass its exit code back up
  gcbw "$new_branch_name" "$default_branch"
  return $?
}
