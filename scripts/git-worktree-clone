#!/bin/bash

# Clones a Git repository into a specific directory structure:
# <repository_name>/<default_branch_name>
#
# It determines the repository name from the URL and queries the remote
# to find the default branch (e.g., main, master, develop) *before* cloning.
# After cloning, it runs 'direnv allow' in the new directory and cds into it.
#
# Usage: git worktree-clone [-n|--no-checkout] [-q|--quiet] <repository-url>
#
# Options:
#   -n, --no-checkout   Only clone the repository and create the .git folder
#                       but do not checkout the default branch worktree
#   -q, --quiet         Suppress all output and run silently
#
# Examples:
#   git worktree-clone git@github.com:someuser/my-cool-project.git
#   -> Determines default branch (e.g., 'main')
#   -> Creates directory ./my-cool-project/main
#   -> Clones the repo into ./my-cool-project/main
#   -> Runs 'direnv allow .' in ./my-cool-project/main
#   -> Changes current directory to ./my-cool-project/main
#
#   git worktree-clone -n git@github.com:someuser/my-cool-project.git
#   -> Creates directory ./my-cool-project/.git
#   -> Clones the repo as bare repository into ./my-cool-project/.git
#   -> Stays in current directory (no worktree created)
#
#   git worktree-clone -q git@github.com:someuser/my-cool-project.git
#   -> Runs completely silently, no output to terminal
#   -> Same behavior as default but with all output suppressed
#

# --- Store Original Directory ---
original_dir=$(pwd)
# --- End Store ---

# --- Input ---
no_checkout=false
quiet=false
repo_url=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -n|--no-checkout)
            no_checkout=true
            shift
            ;;
        -q|--quiet)
            quiet=true
            shift
            ;;
        -*)
            echo "Error: Unknown option '$1'" >&2
            echo "Usage: git worktree-clone [-n|--no-checkout] [-q|--quiet] <repository-url>" >&2
            cd -- "$original_dir" || echo "Warning: could not cd back to $original_dir" >&2
            exit 1
            ;;
        *)
            if [[ -z "$repo_url" ]]; then
                repo_url="$1"
            else
                echo "Error: Multiple repository URLs provided" >&2
                echo "Usage: git worktree-clone [-n|--no-checkout] [-q|--quiet] <repository-url>" >&2
                cd -- "$original_dir" || echo "Warning: could not cd back to $original_dir" >&2
                exit 1
            fi
            shift
            ;;
    esac
done
# --- End Input ---

# --- Tool Dependencies Check ---
missing_deps=0
if ! command -v git &> /dev/null; then
  echo "Error: 'git' command not found. Please install Git." >&2
  missing_deps=1
fi
if ! command -v basename &> /dev/null; then
  echo "Error: 'basename' command not found. Cannot extract repository name." >&2
  missing_deps=1
fi
 if ! command -v awk &> /dev/null; then
  echo "Error: 'awk' command not found. Cannot determine default branch." >&2
  missing_deps=1
fi
# We'll check for direnv later, only if needed
if [[ "$missing_deps" -ne 0 ]]; then
  # Go back to original dir in case something went wrong before this point
  # (though unlikely with current structure)
  cd -- "$original_dir" || echo "Warning: could not cd back to $original_dir" >&2
  exit 1 # Return error if dependencies are missing
fi
# --- End Tool Check ---


# --- Input Validation ---
if [[ -z "$repo_url" ]]; then
  echo "Error: Repository URL is required." >&2
  echo "Usage: git worktree-clone [-n|--no-checkout] [-q|--quiet] <repository-url>" >&2
  cd -- "$original_dir" || echo "Warning: could not cd back to $original_dir" >&2
  exit 1
fi
# --- End Validation ---


# --- Variable Declaration ---
repo_name=""
default_branch=""
parent_dir=""
clone_target_dir=""
head_ref_line=""
# --- End Variable Declaration ---

# --- Helper Functions ---
quiet_echo() {
    if [[ "$quiet" == "false" ]]; then
        echo "$@"
    fi
}
# --- End Helper Functions ---


# --- Step 1: Extract Repository Name ---
if [[ "$repo_url" == *:* ]]; then
  # Shorthand format: user/org:repo-name
  repo_name=$(basename "${repo_url##*:}" .git)
else
  # Full URL format: git@github.com:user/repo.git or https://github.com/user/repo.git
  repo_name=$(basename "$repo_url" .git)
  repo_name=$(basename "$repo_name")
fi

if [[ -z "$repo_name" ]]; then
   echo "Error: Could not extract repository name from URL: '$repo_url'" >&2
   cd -- "$original_dir" || echo "Warning: could not cd back to $original_dir" >&2
   exit 1
fi
quiet_echo "Repository name detected: '$repo_name'"
# --- End Step 1 ---


# --- Step 2: Determine Default Branch Remotely ---
quiet_echo "Querying remote '$repo_url' for default branch..."
head_ref_line=$(git ls-remote --symref "$repo_url" HEAD 2>/dev/null)

if [[ -z "$head_ref_line" ]]; then
    echo "Error: Could not query remote HEAD ref for '$repo_url'." >&2
    echo "Please check the URL, network connectivity, and repository permissions." >&2
    cd -- "$original_dir" || echo "Warning: could not cd back to $original_dir" >&2
    exit 1
fi

default_branch=$(echo "$head_ref_line" | awk '/^ref:/ {sub("refs/heads/", ""); print $2}')

if [[ -z "$default_branch" ]]; then
    echo "Error: Could not parse default branch name from ls-remote output:" >&2
    echo "$head_ref_line" >&2
    cd -- "$original_dir" || echo "Warning: could not cd back to $original_dir" >&2
    exit 1
fi
quiet_echo "Default branch detected: '$default_branch'"
# --- End Step 2 ---


# --- Step 3: Define and Create Directory Structure ---
parent_dir="$repo_name"
worktree_dir="${parent_dir}/${default_branch}"

quiet_echo "Target repository directory: './${parent_dir}'"
if [[ "$no_checkout" == "false" ]]; then
    quiet_echo "Initial worktree will be in: './${worktree_dir}'"
else
    quiet_echo "No-checkout mode: Only bare repository will be created"
fi

# Check for potential conflicts before creating directories
if [[ -e "$parent_dir" ]]; then
    echo "Error: Target path './${parent_dir}' already exists." >&2
    cd -- "$original_dir" || echo "Warning: could not cd back to $original_dir" >&2
    exit 1
fi

quiet_echo "Creating repository directory..."
if ! mkdir -p "$parent_dir"; then
   echo "Error: Failed to create directory './${parent_dir}'." >&2
   cd -- "$original_dir" || echo "Warning: could not cd back to $original_dir" >&2
   exit 1
fi
# --- End Step 3 ---


# --- Step 4: Clone the Repository ---
quiet_echo "Cloning bare repository into './${parent_dir}/.git'..."
# Clone a bare repo, which contains only the git data, into the .git directory
if [[ "$quiet" == "true" ]]; then
    git_clone_cmd="git clone --bare --quiet"
else
    git_clone_cmd="git clone --bare"
fi
if ! $git_clone_cmd "$repo_url" "${parent_dir}/.git"; then
    echo "Error: 'git clone --bare' failed." >&2
    echo "Cleaning up created directory..." >&2
    rm -rf "$parent_dir"
    cd -- "$original_dir" || echo "Warning: could not cd back to $original_dir" >&2
    exit 1
fi
# --- End Step 4 ---


# --- Step 5: Create Initial Worktree (unless no-checkout) ---
if [[ "$no_checkout" == "false" ]]; then
    quiet_echo "--> Changing directory to './${parent_dir}'"
    if ! cd -- "$parent_dir"; then
        echo "Error: Failed to change directory to './${parent_dir}'." >&2
        echo "You may need to manually complete the setup." >&2
        cd -- "$original_dir" || echo "Warning: could not cd back to $original_dir" >&2
        exit 1
    fi

    quiet_echo "Creating initial worktree for branch '${default_branch}'..."
    # We are inside the repo_name dir, so .git is found automatically
    if [[ "$quiet" == "true" ]]; then
        git_worktree_cmd="git worktree add --quiet"
    else
        git_worktree_cmd="git worktree add"
    fi
    if ! $git_worktree_cmd "$default_branch"; then
        echo "Error: 'git worktree add' failed for branch '${default_branch}'." >&2
        echo "Cleaning up..." >&2
        cd ..
        rm -rf "$repo_name"
        exit 1
    fi
    
    # --- Step 6: Post-Clone Actions (cd & direnv) ---
    quiet_echo "--> Changing directory to worktree: './${default_branch}'"
    if cd -- "$default_branch"; then
        current_dir=$(pwd)
        quiet_echo "--> Successfully changed directory to $current_dir"

        # Run direnv allow if available
        if command -v direnv &> /dev/null; then
            if [[ -f ".envrc" ]]; then
                quiet_echo "--> Running 'direnv allow'..."
                if direnv allow .; then
                    quiet_echo "--> 'direnv allow .' completed successfully."
                else
                    echo "Warning: 'direnv allow .' failed. You may need to run it manually." >&2
                fi
            else
                quiet_echo "--> No .envrc file found. Skipping 'direnv allow'."
            fi
        fi

        quiet_echo "---"
        quiet_echo "Success!"
        quiet_echo "Repository '$repo_name' cloned successfully."
        quiet_echo "The main Git directory is at: '$(git rev-parse --git-dir)'"
        quiet_echo "Your initial worktree for branch '${default_branch}' is ready at: '$(pwd)'"
        quiet_echo "You are now inside the initial worktree."
        exit 0

    else
        local cd_exit_code=$?
        echo "---"
        echo "Error: Failed to change directory into the new worktree at './${default_branch}' (Exit code: ${cd_exit_code})." >&2
        echo "The repository and worktree have been created, but you are still in the parent directory: $(pwd)" >&2
        exit 1
    fi
    # --- End Step 6 ---
else
    # No-checkout mode: just report success and stay in original directory
    quiet_echo "---"
    quiet_echo "Success!"
    quiet_echo "Repository '$repo_name' cloned successfully (no-checkout mode)."
    quiet_echo "The bare Git repository is at: '$(realpath "${parent_dir}/.git")'"
    quiet_echo "No worktree was created. You can create worktrees using 'git worktree add' from within the repository directory."
    quiet_echo "You are still in the original directory: $(pwd)"
    exit 0
fi
# --- End Step 5 ---
