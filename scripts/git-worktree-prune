#!/bin/bash

# Prunes local Git branches whose remote counterparts have been deleted,
# ensuring any associated worktrees are removed first.
#
# Usage: git worktree-prune
#

# --- Configuration ---
REMOTE_NAME="origin"
# --- End Configuration ---

# --- Variable Declaration ---
branch_name=""
worktree_path=""
branches_deleted=0
worktrees_removed=0
gone_branches=() # Array to hold branches to prune
line=""
branch_ref=""
tracking_status=""
target_branch_ref=""
current_path=""

# Ensure we are in a git repository
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
  echo "Error: Not inside a Git repository." >&2
  exit 1
fi

echo "Fetching from remote $REMOTE_NAME and pruning stale remote-tracking branches..."
if ! git fetch "$REMOTE_NAME" --prune; then
  echo "Error: git fetch $REMOTE_NAME --prune failed. Aborting." >&2
  exit 1
fi

echo "Identifying local branches whose upstream branch is gone..."
# Method 1: Use git branch -vv and grep to find branches with gone upstream
while IFS= read -r line; do
    if [[ -n "$line" ]]; then
        # Extract branch name - it's the first word, removing the * if current branch
        branch_name=$(echo "$line" | awk '{print $1}' | sed 's/^\*//')
        if [[ -n "$branch_name" ]]; then
            gone_branches+=("$branch_name")
        fi
    fi
done < <(git branch -vv | grep -E '\[.*: gone\]')

# Method 2: Also check for branches that don't exist on remote but have worktrees
echo "Checking for branches with worktrees that don't exist on remote..."
while IFS= read -r branch_name; do
    if [[ -n "$branch_name" && "$branch_name" != "master" && "$branch_name" != "main" ]]; then
        # Check if this branch has a worktree
        if git worktree list --porcelain | grep -q "branch refs/heads/$branch_name"; then
            # Check if this branch exists on remote
            if ! git ls-remote --heads "$REMOTE_NAME" "refs/heads/$branch_name" | grep -q "refs/heads/$branch_name"; then
                # Check if this branch is not already in gone_branches array
                if [[ ! " ${gone_branches[*]} " =~ " $branch_name " ]]; then
                    gone_branches+=("$branch_name")
                    echo "Found branch with worktree not on remote: $branch_name"
                fi
            fi
        fi
    fi
done < <(git for-each-ref --format='%(refname:short)' refs/heads)


if [[ ${#gone_branches[@]} -eq 0 ]]; then
  echo "No local branches found that need to be pruned. Nothing to do."
  exit 0
fi

echo "Found ${#gone_branches[@]} branches to potentially prune:"
printf -- " - %s\n" "${gone_branches[@]}"
echo ""

# Iterate over the branches identified as gone
for branch_name in "${gone_branches[@]}"; do
  echo "--- Processing branch: $branch_name ---"

  # --- Check for Worktree using --porcelain (More Robust) ---
  target_branch_ref="refs/heads/$branch_name"
  worktree_path="" # Reset for each branch
  current_path=""  # Track path for the current block

  # Use process substitution to feed porcelain output to the loop
  while IFS= read -r line || [[ -n "$line" ]]; do
    if [[ "$line" == worktree* ]]; then
      current_path="${line#worktree }"
      worktree_path=""
    elif [[ -n "$current_path" && "$line" == "branch $target_branch_ref" ]]; then
      worktree_path="$current_path"
      break
    elif [[ -z "$line" ]]; then
       current_path=""
    fi
done < <(git worktree list --porcelain)
  # --- End Worktree Check ---


  if [[ -n "$worktree_path" ]]; then
    echo "Found associated worktree for $branch_name at: $worktree_path"

    if [[ -d "$worktree_path" ]]; then
      echo "Attempting to remove worktree..."
      if git worktree remove --force "$worktree_path"; then
        echo "Worktree at $worktree_path removed successfully."
        ((worktrees_removed++))
      else
        echo "Error: Failed to remove worktree $worktree_path. Skipping deletion of branch $branch_name." >&2
        continue # Skip to next branch
      fi
    else
      echo "Warning: Worktree directory $worktree_path not found. Attempting git worktree prune might be needed separately." >&2
      echo "Attempting to force remove the worktree record anyway..."
      if git worktree remove --force "$worktree_path"; then
         echo "Worktree record for $worktree_path removed successfully."
         ((worktrees_removed++))
      else
         echo "Error: Failed to remove potentially orphaned worktree record $worktree_path. Skipping deletion of branch $branch_name." >&2
         continue # Skip to next branch
      fi
    fi
  else
    echo "No associated worktree found for $branch_name."
  fi

  # Now, attempt to delete the local branch
  echo "Attempting to delete local branch $branch_name..."
  if git branch -D "$branch_name"; then
    echo "Local branch $branch_name deleted successfully."
    ((branches_deleted++))
  else
    echo "Error: Failed to delete branch $branch_name." >&2
  fi
  echo "----------------------------------------" # Separator
done

echo ""
echo "--- Summary ---"
echo "Branches deleted: $branches_deleted"
echo "Worktrees removed: $worktrees_removed"
echo "Pruning process complete."

# Check if any worktrees might need manual pruning
if git worktree list | grep -q prunable; then
   echo ""
   echo "Note: Some prunable worktree data may exist. Run git worktree prune to clean up."
fi

exit 0 # Indicate success