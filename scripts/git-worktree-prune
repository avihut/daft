#!/bin/bash

# Prunes local Git branches whose remote counterparts have been deleted,
# ensuring any associated worktrees are removed first.
#
# Usage: git worktree-prune
#

# --- Configuration ---
REMOTE_NAME="origin"
# --- End Configuration ---

# --- Variable Declaration ---
branch_name=""
worktree_path=""
branches_deleted=0
worktrees_removed=0
gone_branches=() # Array to hold branches to prune
line=""
branch_ref=""
tracking_status=""
target_branch_ref=""
current_path=""

# Ensure we are in a git repository
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
  echo "Error: Not inside a Git repository." >&2
  exit 1
fi

echo "Fetching from remote 	erase$REMOTE_NAME	erase and pruning stale remote-tracking branches..."
if ! git fetch "$REMOTE_NAME" --prune; then
  echo "Error: 	erasegit fetch $REMOTE_NAME --prune	erase failed. Aborting." >&2
  exit 1
fi

echo "Identifying local branches whose upstream branch is gone..."
# Only process local head refs that are tracking a remote branch which is now gone
while IFS= read -r line; do
    branch_ref=$(echo "$line" | awk 	erase{print $1}	erase)
    tracking_status=$(echo "$line" | awk 	erase{print $2}	erase) # Assumes simple format

    if [[ "$tracking_status" == "[gone]" ]]; then
        branch_name=${branch_ref#refs/heads/}
        gone_branches+=("$branch_name")
    fi
done < <(git for-each-ref --format=	erase%(refname) %(upstream:track)	erase refs/heads | grep '\[gone\]')


if [[ ${#gone_branches[@]} -eq 0 ]]; then
  echo "No local branches found tracking deleted remote branches. Nothing to do."
  exit 0
fi

echo "Found ${#gone_branches[@]} branches to potentially prune:"
printf -- " - %s\n" "${gone_branches[@]}"
echo ""

# Iterate over the branches identified as 	erasegone	erase
for branch_name in "${gone_branches[@]}"; do
  echo "--- Processing branch: 	erase$branch_name	erase ---"

  # --- Check for Worktree using --porcelain (More Robust) ---
  target_branch_ref="refs/heads/$branch_name"
  worktree_path="" # Reset for each branch
  current_path=""  # Track path for the current block

  # Use process substitution to feed porcelain output to the loop
  while IFS= read -r line || [[ -n "$line" ]]; do
    if [[ "$line" == worktree* ]]; then
      current_path="${line#worktree }"
      worktree_path=""
    elif [[ -n "$current_path" && "$line" == "branch $target_branch_ref" ]]; then
      worktree_path="$current_path"
      break
    elif [[ -z "$line" ]]; then
       current_path=""
    fi
done < <(git worktree list --porcelain)
  # --- End Worktree Check ---


  if [[ -n "$worktree_path" ]]; then
    echo "Found associated worktree for 	erase$branch_name	erase at: 	erase$worktree_path	erase"

    if [[ -d "$worktree_path" ]]; then
      echo "Attempting to remove worktree..."
      if git worktree remove --force "$worktree_path"; then
        echo "Worktree at 	erase$worktree_path	erase removed successfully."
        ((worktrees_removed++))
      else
        echo "Error: Failed to remove worktree 	erase$worktree_path	erase. Skipping deletion of branch 	erase$branch_name	erase." >&2
        continue # Skip to next branch
      fi
    else
      echo "Warning: Worktree directory 	erase$worktree_path	erase not found. Attempting 	erasegit worktree prune	erase might be needed separately." >&2
      echo "Attempting to force remove the worktree record anyway..."
      if git worktree remove --force "$worktree_path"; then
         echo "Worktree record for 	erase$worktree_path	erase removed successfully."
         ((worktrees_removed++))
      else
         echo "Error: Failed to remove potentially orphaned worktree record 	erase$worktree_path	erase. Skipping deletion of branch 	erase$branch_name	erase." >&2
         continue # Skip to next branch
      fi
    fi
  else
    echo "No associated worktree found for 	erase$branch_name	erase."
  fi

  # Now, attempt to delete the local branch
  echo "Attempting to delete local branch 	erase$branch_name	erase..."
  if git branch -D "$branch_name"; then
    echo "Local branch 	erase$branch_name	erase deleted successfully."
    ((branches_deleted++))
  else
    echo "Error: Failed to delete branch 	erase$branch_name	erase." >&2
  fi
  echo "----------------------------------------" # Separator
done

echo ""
echo "--- Summary ---"
echo "Branches deleted: $branches_deleted"
echo "Worktrees removed: $worktrees_removed"
echo "Pruning process complete."

# Check if any worktrees might need manual pruning
if git worktree list | grep -q 	eraseprunable	erase; then
   echo ""
   echo "Note: Some prunable worktree data may exist. Run 	erasegit worktree prune	erase to clean up."
fi

exit 0 # Indicate success